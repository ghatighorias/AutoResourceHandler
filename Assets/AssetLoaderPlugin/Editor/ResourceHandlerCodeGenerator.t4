<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AutoAssetLoader" #>

// make sure the customTool in the perperty panel of this file is set to "TextTemplatingFilePreprocessor" unless it won't work
//------------------------------------------------------------------------------
//   This code was generated by T4 template.
//   Any changes to this file may cause incorrect behavior and will be lost
//   when the code is regenerated.
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using UnityEditor;
using AutoAssetLoader;
using System.ComponentModel;
using System.Collections.Generic;

namespace <#= namespaceName #> 
{
	public class <#= className #> : ResourceHandlerBase<<#=enumName#>>
	{
		protected override Dictionary<<#=enumName#>, string> _ResourHandlerMapper { get; set; } = new Dictionary<<#=enumName#>, string>()
		{
		<# foreach(var item in items) {#>
	{<#=enumName#>.<#=getEnumName(item)#>, "<#=item.guid#>"},
		<#}#>};
	}
		/// <summary>
		/// Enum indicating the available assets for loading using <#= className #> load function
		/// </summary>
		public enum <#= enumName #>
		{
		<# foreach(var item in items) {#>
	[Description("<#=item.name#>")]
			<#=string.Format("{0},", getEnumName(item))#>
		<#}#>}
}

<#+
    List<FileItemDescriptor> items = new List<FileItemDescriptor>();
	string namespaceName;
	string className;
	string enumName;
	string saveLocation;
	string itemNamePrefix;
    bool itemNameToUpper;

	string getEnumName(FileItemDescriptor item)
	{
		var uniqueName = item.nameExist ? $"{item.NormalizedDirectory}_{item.NormalizedName}" : item.NormalizedName;
		var prefixedName = $"{itemNamePrefix}{uniqueName}";
		return itemNameToUpper ? prefixedName.ToUpper() : prefixedName;
	}

	public static void GenerateAndSave(List<FileItemDescriptor> items, ClassDescriptor descriptor)
	{
	        ResourceHandlerCodeGenerator t4 = new ResourceHandlerCodeGenerator();
		    t4.namespaceName = descriptor.namespaceName;
			t4.className = descriptor.className;
			t4.enumName = descriptor.EnumName;
			t4.saveLocation = descriptor.saveLocation;
			t4.itemNamePrefix = descriptor.itemNamePrefix;
			t4.itemNameToUpper = descriptor.itemNameToUpper;
			t4.items = items;

            var fileName = string.Format("./{0}/{1}.cs", t4.saveLocation, t4.className);
            using (var writer = System.IO.File.CreateText(fileName))
            {
                writer.WriteLine(t4.TransformText());
                writer.Flush();
            }
	}
#>