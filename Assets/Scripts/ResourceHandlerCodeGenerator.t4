<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
//   This code was generated by T4 template.
//   Any changes to this file may cause incorrect behavior and will be lost
//   when the code is regenerated.
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;

<# if(!string.IsNullOrEmpty(namespaceName)) 
	{ #>
namespace <#= namespaceName #> 
{
 <# } #>
public class <#= className #>
{
    private static Dictionary<<#=enumName#>, string> <#=mapperName#> = new Dictionary<<#=enumName#>, string>()
    {
<# foreach(var item in items)
{#>
        {<#=enumName#>.<#=item.name#>, "<#=item.AssetPath#>"},
<#}#>
    };
    
    public int ResourceCount { get { return <#=mapperName#>.Count; }}

	/// <summary>
	/// Loads a game object from using its mapped enum
	/// </summary>
    public static GameObject Load(<#=enumName#> resource)
    {
        return Load<GameObject>(resource);
    }

	/// <summary>
	/// Loads an asset from using its mapped enum
	/// </summary>    
    public static T Load<T>(<#=enumName#> resource)
    {
        return AssetLoad<T>(<#=mapperName#>[resource]);
    }

	/// <summary>
	/// Load an asset using its path
	/// </summary>
    private static T AssetLoad<T>(string path)
    {
        var value = Resources.Load(path);
        return (T)Convert.ChangeType(value, typeof(T));
    }
    
	/// <summary>
	/// Enum indicating the available assets for loading using <#= className #> load function
	/// </summary>
    public enum <#= enumName #>
    {
<# foreach(var item in items)
{#>
        <#=string.Format("{0},", item.name)#>
<#}#>
    }
}

<# if(!string.IsNullOrEmpty(namespaceName)) 
{#>
}
<# } #>

<#+
    string className = "defaultClassName";
    string enumName = "defaultEnumName";
    string mapperName = "defaultMapperName";
    string namespaceName = string.Empty;
    List<AutoAssetLoader.SelectedItem> items = new List<AutoAssetLoader.SelectedItem>();

	/// <summary>
	/// Generate the asset loader class using ClassDescriptor
	/// </summary>
    public void SetupGenerator(AutoAssetLoader.ClassDescriptor classDescriptor)
    {
        mapperName = classDescriptor.MapperName;
        enumName = classDescriptor.EnumName;
        className = classDescriptor.className;
        namespaceName = classDescriptor.namespaceName;
        
        items = classDescriptor.items;
    }


	public static void GenerateAndSave(AutoAssetLoader.ClassDescriptor classDescriptor)
	{
	        ResourceHandlerCodeGenerator t4 = new ResourceHandlerCodeGenerator();
            t4.SetupGenerator(classDescriptor);

            var fileName = string.Format("./{0}/{1}.cs", classDescriptor.saveLocation, classDescriptor.className);
            using (var writer = System.IO.File.CreateText(fileName))
            {
                writer.WriteLine(t4.TransformText());
                writer.Flush();
            }
	}
#>