<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="AutoAssetLoader" #>

// make sure the customTool in the perperty panel of this file is set to "TextTemplatingFilePreprocessor" unless it won't work
//------------------------------------------------------------------------------
//   This code was generated by T4 template.
//   Any changes to this file may cause incorrect behavior and will be lost
//   when the code is regenerated.
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using System.Collections.Generic;
using AutoAssetLoader;

namespace AutoAssetLoader 
{
	public class <#= className #>
	{
		private static Dictionary<<#=enumName#>, string> <#=mapperName#> = new Dictionary<<#=enumName#>, string>()
		{
			<# foreach(var item in items)
			{#>
					{<#=enumName#>.<#=getEnumName(item.name)#>, "<#=item.guid#>"},
			<#}#>
		};
    
		public int ResourceCount { get { return <#=mapperName#>.Count; } }

		public bool ContainsGuid(string guid)
		{
			return <#=mapperName#>.ContainsValue(guid);
		}

		/// <summary>
		/// Loads a game object from using its mapped enum
		/// </summary>
		public static GameObject Load(<#=enumName#> resource)
		{
			return Load<GameObject>(resource);
		}

		/// <summary>
		/// Loads an asset from using its mapped enum
		/// </summary>    
		public static T Load<T>(<#=enumName#> resource)
		{
			return AssetLoad<T>(<#=mapperName#>[resource]);
		}

		/// <summary>
		/// Load an asset using its path
		/// </summary>
		private static T AssetLoad<T>(string guid)
		{
			var path = AssetDatabase.GUIDToAssetPath(guid);
			var value = Resources.Load(path);
			return (T)Convert.ChangeType(value, typeof(T));
		}
    
		/// <summary>
		/// Enum indicating the available assets for loading using <#= className #> load function
		/// </summary>
		public enum <#= enumName #>
		{
			<# foreach(var item in items) {#>
				<#=string.Format("{0},", getEnumName(item.name))#>
			<#}#>
		}
	}
}

<#+
    List<FileItemDescriptor> items = new List<FileItemDescriptor>();
	string className;
	string enumName;
	string mapperName;
	string saveLocation;
	string itemNamePrefix;
    bool itemNameToUpper;

	string getEnumName(string name)
	{
		var fullName = $"{itemNamePrefix}{name}";
		return itemNameToUpper ? fullName.ToUpper() : fullName;
	}

	public static void GenerateAndSave(List<FileItemDescriptor> items)
	{
	        ResourceHandlerCodeGenerator t4 = new ResourceHandlerCodeGenerator();
    
			t4.className = AutoResourceHandler.ClassDescriptor.className;
			t4.enumName = AutoResourceHandler.ClassDescriptor.EnumName;
			t4.mapperName = AutoResourceHandler.ClassDescriptor.MapperName;
			t4.saveLocation = AutoResourceHandler.ClassDescriptor.saveLocation;
			t4.itemNamePrefix = AutoResourceHandler.ClassDescriptor.itemNamePrefix;
			t4.itemNameToUpper = AutoResourceHandler.ClassDescriptor.itemNameToUpper; 
			t4.items = items;

            var fileName = string.Format("./{0}/{1}.cs", t4.saveLocation, t4.className);
            using (var writer = System.IO.File.CreateText(fileName))
            {
                writer.WriteLine(t4.TransformText());
                writer.Flush();
            }
	}
#>